// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bts2helper.djinni

#import "B2HBts2helper+Private.h"
#import "B2HBts2helper.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface B2HBts2helper ()

- (id)initWithCpp:(const std::shared_ptr<::bts2helper::Bts2helper>&)cppRef;

@end

@implementation B2HBts2helper {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::bts2helper::Bts2helper>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::bts2helper::Bts2helper>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nonnull NSString *)txDigest:(nonnull NSString *)txJson
                       chainId:(nonnull NSString *)chainId {
    try {
        auto objcpp_result_ = ::bts2helper::Bts2helper::tx_digest(::djinni::String::toCpp(txJson),
                                                                  ::djinni::String::toCpp(chainId));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSString *)signCompact:(nonnull NSString *)digest
                              wif:(nonnull NSString *)wif {
    try {
        auto objcpp_result_ = ::bts2helper::Bts2helper::sign_compact(::djinni::String::toCpp(digest),
                                                                     ::djinni::String::toCpp(wif));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (BOOL)isValidName:(nonnull NSString *)name {
    try {
        auto objcpp_result_ = ::bts2helper::Bts2helper::is_valid_name(::djinni::String::toCpp(name));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (BOOL)isCheapName:(nonnull NSString *)name {
    try {
        auto objcpp_result_ = ::bts2helper::Bts2helper::is_cheap_name(::djinni::String::toCpp(name));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSArray<NSNumber *> *)calcFee:(nonnull NSString *)feeSchedule
                                     ops:(nonnull NSArray<NSString *> *)ops
                       coreExchangeRatio:(nonnull NSString *)coreExchangeRatio {
    try {
        auto objcpp_result_ = ::bts2helper::Bts2helper::calc_fee(::djinni::String::toCpp(feeSchedule),
                                                                 ::djinni::List<::djinni::String>::toCpp(ops),
                                                                 ::djinni::String::toCpp(coreExchangeRatio));
        return ::djinni::List<::djinni::I64>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSString *)encodeMemo:(nonnull NSString *)priv
                             pub:(nonnull NSString *)pub
                             msg:(nonnull NSString *)msg {
    try {
        auto objcpp_result_ = ::bts2helper::Bts2helper::encode_memo(::djinni::String::toCpp(priv),
                                                                    ::djinni::String::toCpp(pub),
                                                                    ::djinni::String::toCpp(msg));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSString *)decodeMemo:(nonnull NSString *)priv
                             pub:(nonnull NSString *)pub
                        memoFrom:(nonnull NSString *)memoFrom
                          memoTo:(nonnull NSString *)memoTo
                       memoNonce:(nonnull NSString *)memoNonce
                     memoMessage:(nonnull NSString *)memoMessage {
    try {
        auto objcpp_result_ = ::bts2helper::Bts2helper::decode_memo(::djinni::String::toCpp(priv),
                                                                    ::djinni::String::toCpp(pub),
                                                                    ::djinni::String::toCpp(memoFrom),
                                                                    ::djinni::String::toCpp(memoTo),
                                                                    ::djinni::String::toCpp(memoNonce),
                                                                    ::djinni::String::toCpp(memoMessage));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Bts2helper::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Bts2helper::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<B2HBts2helper>(cpp);
}

}  // namespace djinni_generated

@end
